{% block krg_cms_route_row %}
    <div class="form-group field-text">
        <div class="col-sm-2 control-label required">
            <label for="{{ form.vars.id }}_url">URL</label><br>
        </div>

        <div class="col-sm-10">
            <input type="text" id="{{ form.vars.id }}_url" />
        </div>
    </div>

    <hr>

    {{ form_row(form.name) }}
    {{ form_widget(form.params, {'attr': {'style': 'border-left: 3px solid #ccc; margin-left: 16.666667%'}}) }}

    <script type="text/javascript">
        window.addEventListener('load', function() {
            var select = document.getElementById('{{ form.name.vars.id }}');
            var params = document.getElementById('{{ form.params.vars.id }}');
            var url = document.getElementById('{{ form.vars.id }}_url');

            {% if form.parent.metaTitle %}
                var propsWrapper = findAncestor(document.getElementById('{{ form.parent.metaTitle.vars.id }}'), 'box-body');
                var divProps = null;
            {% endif %}

            {% if form.parent.url is defined %}
                var redirectUrl = document.getElementById('{{ form.parent.url.vars.id }}');
            {% endif %}

            select.addEventListener('change', routeChange);
            url.addEventListener('paste', urlChange);

            routeChange();

            function urlChange() {
                setTimeout(function () { {# Paste timeout #}
                    bindRoute(url.value, 'url');
                }, 100);
            }

            function routeChange() {
                var selectedOption = select.options[select.selectedIndex];

                bindRoute(selectedOption.value, 'route');
            }

            function bindRoute(url, type) {
                if (url.length === 0) {
                    bindRouteText();
                    return;
                }

                var xmlhttp = new XMLHttpRequest();

                xmlhttp.onreadystatechange = function () {
                    if (xmlhttp.readyState === 4) {
                        if (xmlhttp.status === 200) {
                            var data = JSON.parse(xmlhttp.responseText);

                            bindParameters(data.parameters);
                            bindProperties(data.properties);
                            bindSelect(data.route);
                            bindRedirectUrl();
                            bindRouteText();
                        } else if (xmlhttp.status === 500) {
                            alert('{{ 'route.url_error'|trans }}.');
                            bindRouteText();
                        }
                    }
                };

                xmlhttp.open("GET", "{{ path('krg_cms_route_data') }}" + "?"+ type +"=" + url, true);
                xmlhttp.send();
            }

            function bindSelect(route) {
                for (var i = 0; i < select.options.length; i++) {
                    if (select.options[i].value === route) {
                        select.selectedIndex = i;
                        break;
                    }
                }
            }

            function bindRedirectUrl() {
                if (redirectUrl !== undefined) {
                    redirectUrl.value = select.options[select.selectedIndex].innerText;
                }
            }

            function bindParameters(parameters) {
                params.innerHTML = '';
                for(var name in parameters) {
                    if (!parameters.hasOwnProperty(name)) continue;
                    addParam(name, parameters[name]);
                }
                params.style.display = parameters.length === 0 ? 'none' : 'block';
            }

            function bindProperties(properties) {
                if (divProps !== undefined && divProps) {
                    divProps.innerHTML = '';
                }

                if (properties.length === 0) {
                    return;
                }

                if (propsWrapper !== undefined) {
                    divProps = document.createElement('div');
                    divProps.id = 'props-wrapper';
                    divProps.innerHTML = '<strong>{{ 'route.available_vars'|trans }}:</strong> '
                        + properties.join(', ') + '<br>'
                        + '<hr>';

                    propsWrapper.prepend(divProps);
                }
            }

            function bindRouteText() {
                url.value = '';
                url.setAttribute('placeholder', select.value ?
                    '{{ 'route.match'|trans }}: ' + select.value + ' ({{ 'route.click_change'|trans }})'
                    : '{{ 'route.paste_here'|trans }}');
            }

            function addParam(name, value) {
                var attrValue = typeof value === 'undefined' ? '' : '" value="' + value;

                params.innerHTML += params.dataset.prototype
                    .replace(/\>__name__label__\</g, '>' + name.charAt(0).toUpperCase() + name.slice(1) + '<')
                    .replace(/_params___name__/g, '_params_' + name)
                    .replace(/params\]\[__name__\]/g, 'params][' + name + ']' + attrValue);
            }

            function findAncestor(element, className) {
                while ((element = element.parentElement) && !element.classList.contains(className));

                return element;
            }
        }, false);
    </script>
{% endblock %}
