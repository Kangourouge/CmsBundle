{% block krg_cms_route_widget %}
    {{ form_row(form.url) }}
    {{ form_row(form.name) }}
    {{ form_widget(form.params, {'attr': {'style': 'border-left: 3px solid #ccc; margin-left: 16.666667%; margin-top: 10px'}}) }}
    <hr>
    <script type="text/javascript">
        window.addEventListener('load', function() {
            var selectInput = document.getElementById('{{ form.name.vars.id }}');
            var paramsInput = document.getElementById('{{ form.params.vars.id }}');
            var urlInput = document.getElementById('{{ form.url.vars.id }}');

            {% if form.parent.metaTitle is defined %}
                var propsWrapper = document.forms['{{ form.parent.vars.id }}'].querySelectorAll('.field-group')[2];
                var divProps = null;
            {% endif %}

            {% if form.parent.url is defined %}
                var seoUrlInputs = document.querySelectorAll('input[id^={{ form.parent.url.vars.id }}]');
            {% endif %}

            selectInput.addEventListener('change', routeChange);
            urlInput.addEventListener('paste', urlChange);

            if (urlInput.value.length > 0) {
                bindRoute(urlInput.value, 'url', true);
            } else {
                bindRoute(selectInput.options[selectInput.selectedIndex].value, 'route', false);
            }

            function urlChange() {
                setTimeout(function () { {# Paste timeout #}
                    bindRoute(urlInput.value, 'url', true);
                }, 100);
            }

            function routeChange() {
                var selectedOption = selectInput.options[selectInput.selectedIndex];

                bindRoute(selectedOption.value, 'route', true);
            }

            function bindRoute(url, type, hardBind) {
                if (url.length === 0) {
                    bindRouteText();
                    return;
                }

                fetch('{{ path('krg_cms_route_data') }}' + '?' + type + '=' + url, {
                    method: 'GET',
                    credentials: 'same-origin',
                }).then(function(response) {
                    if (response.status === 200) {
                        response.json().then(function(data) {
                            if (hardBind) {
                                bindParameters(data.parameters);
                                bindSelect(data.route);
                                bindRedirectUrl();
                            }

                            bindProperties(data.properties);
                            bindRouteText();
                        });
                    } else if (response.status === 500) {
                        alert('{{ 'routing.url_error'|trans({}, 'admin') }}.');
                        bindRouteText();
                    }
                });
            }

            function bindSelect(route) {
                for (var i = 0; i < selectInput.options.length; i++) {
                    if (selectInput.options[i].value === route) {
                        selectInput.selectedIndex = i;
                        break;
                    }
                }
            }

            function bindRedirectUrl() {
                seoUrlInputs.forEach(function(seoUrlInput) {
                    seoUrlInput.value = selectInput.options[selectInput.selectedIndex].innerText;
                });
            }

            function bindParameters(parameters) {
                paramsInput.innerHTML = '';
                for(var name in parameters) {
                    if (!parameters.hasOwnProperty(name)) continue;
                    addParam(name, parameters[name]);
                }
                paramsInput.style.display = parameters.length === 0 ? 'none' : 'block';
            }

            function bindProperties(properties) {
                if (divProps !== undefined && divProps) {
                    divProps.remove();
                }

                if (properties.length === 0) {
                    return;
                }

                if (propsWrapper !== undefined) {
                    divProps = document.createElement('div');

                    properties.forEach(function(value, key) {
                        properties[key] = '<span>' + value + '</span>';
                    });

                    divProps.id = 'props-wrapper';
                    divProps.innerHTML = '<strong>{{ 'routing.available_vars'|trans({}, 'admin') }}</strong><br>' + properties.join(', ') + '<br>';
                    divProps.classList.add('box');
                    propsWrapper.prepend(divProps);
                    divProps.querySelectorAll('span').forEach(function(span) {
                       span.onclick = function() { document.execCommand('copy'); };
                       span.addEventListener('copy', function(event) {
                           event.preventDefault();
                           if (event.clipboardData) {
                               event.clipboardData.setData('text/plain', '\{\{ ' + span.textContent + ' \}\}' );
                           }
                       })
                    });
                }
            }

            function bindRouteText() {
                urlInput.value = '';
                urlInput.setAttribute('placeholder', selectInput.value ?
                    '{{ 'routing.match'|trans({}, 'admin') }}: ' + selectInput.value + ' ({{ 'routing.click_change'|trans({}, 'admin')  }})'
                    : '{{ 'routing.paste_here'|trans({}, 'admin')  }}');
            }

            function addParam(name, value) {
                var attrValue = 'value="' + (value !== null ? value : '') + '"';

                paramsInput.innerHTML += paramsInput.dataset.prototype
                    .replace(/\>__name__label__\</g, '>' + name.charAt(0).toUpperCase() + name.slice(1) + '<')
                    .replace(/_params___name__/g, '_params_' + name)
                    .replace(/params\]\[__name__\]/g, 'params][' + name + ']" ' + attrValue);
            }
        }, false);
    </script>
{% endblock %}
